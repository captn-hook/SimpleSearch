services:
  opensearch-node1:
    user: "1000:1000"
    image: opensearchproject/opensearch:latest
    container_name: opensearch-node1
    environment:
      - plugins.security.disabled=true
      - plugins.performance-analyzer.enabled=false
      - cluster.name=opensearch-cluster # Name the cluster
      - node.name=opensearch-node1 # Name the node that will run in this container
      - discovery.seed_hosts=opensearch-node1,opensearch-node2 # Nodes to look for when discovering the cluster
      - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2 # Nodes eligible to serve as cluster manager
      - bootstrap.memory_lock=true # Disable JVM heap memory swapping
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
      - "DISABLE_SECURITY_PLUGIN=true"
      - "OPENSEARCH_INITIAL_ADMIN_PASSWORD=${DEFAULT_PASSWORD}"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
        hard: 65536
    ports:
      - "${OPENSEARCH_PORT-9200}:9200"
    volumes:
      - ${VOLUME_PATH}/opensearch-data1:/usr/share/opensearch/data # Creates volume called opensearch-data1 and mounts it to the container
    networks:
      - opensearch-net # All of the containers will join the same Docker bridge network

  opensearch-node2:
    user: "1000:1000"
    image: opensearchproject/opensearch:latest
    container_name: opensearch-node2
    environment:
      - plugins.security.disabled=true
      - plugins.performance-analyzer.enabled=false
      - cluster.name=opensearch-cluster # Name the cluster
      - node.name=opensearch-node2 # Name the node that will run in this container
      - discovery.seed_hosts=opensearch-node1,opensearch-node2 # Nodes to look for when discovering the cluster
      - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2 # Nodes eligible to serve as cluster manager
      - bootstrap.memory_lock=true # Disable JVM heap memory swapping
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
      - "DISABLE_SECURITY_PLUGIN=true"
      - "OPENSEARCH_INITIAL_ADMIN_PASSWORD=${DEFAULT_PASSWORD}"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
        hard: 65536
    volumes:
      - ${VOLUME_PATH}/opensearch-data2:/usr/share/opensearch/data # Creates volume called opensearch-data2 and mounts it to the container
    networks:
      - opensearch-net # All of the containers will join the same Docker bridge network

  # opensearch-dashboards:
  #   image: opensearchproject/opensearch-dashboards:latest
  #   container_name: opensearch-dashboards
  #   ports:
  #     - 5601:5601
  #   expose:
  #     - "5601"
  #   environment:
  #     - "DISABLE_SECURITY_DASHBOARDS_PLUGIN=true"
  #     - "OPENSEARCH_HOSTS=${OPENSEARCH_HOST}:${OPENSEARCH_PORT}"

  ollama:
    volumes:
      - ${VOLUME_PATH}/ollama:/root/.ollama
    container_name: ollama
    pull_policy: always
    tty: true
    restart: unless-stopped
    image: ollama/ollama:${OLLAMA_DOCKER_TAG-latest}
    ports:
      - "${OLLAMA_PORT-11434}:11434"
    deploy:
      resources:
        limits:
          memory: 16g
    networks:
      - opensearch-net # All of the containers will join the same Docker bridge network

  open-webui:
    image: ghcr.io/open-webui/open-webui:${WEBUI_DOCKER_TAG-main}
    container_name: open-webui
    volumes:
      - ${VOLUME_PATH}/open-webui:/app/backend/data
    depends_on:
      - ollama
    ports:
      - "${OPEN_WEBUI_PORT-8080}:8080"
    environment:
      - 'OLLAMA_BASE_URL=${OLLAMA_BASE_URL}:${OLLAMA_PORT}'
      - 'WEBUI_SECRET_KEY='
      - 'VECTOR_DB=opensearch'
      - 'OPENSEARCH_URI=${OPENSEARCH_HOST}:${OPENSEARCH_PORT}'
      - 'OPENSEARCH_USERNAME=${DEFAULT_USERNAME}'
      - 'OPENSEARCH_PASSWORD=${DEFAULT_PASSWORD}'
      - 'OPENSEARCH_SSL=false'
      - 'OPENSEARCH_CERT_VERIFY=false'
      - 'ENABLE_RAG_WEB_LOADER_SSL_VERIFICATION=false'
      - 'TIKA_SERVER_URL=${TIKA_URL}:${TIKA_PORT}'
      - 'CONTENT_EXTRACTION_ENGINE=${CONTENT_EXTRACTION_ENGINE}'
      - 'ENV=${ENV}'
    extra_hosts:
      - host.docker.internal:host-gateway
    restart: unless-stopped
    networks:
      - opensearch-net # All of the containers will join the same Docker bridge network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 5

  tika:
    image: apache/tika:latest-full
    configs:
      - source: tika_config_3
        target: ./tika-config.xml
    container_name: tika
    ports:
      - "${TIKA_PORT-9998}:9998"
    restart: unless-stopped
    networks:
      - opensearch-net # All of the containers will join the same Docker bridge network

  datahandler:
    volumes:
      - ${VOLUME_PATH}:/app/data
    build: ./datahandler
    ports:
      - "${FLASK_PORT-5000}:5000"
    environment:
      - 'OPENWEBUI_URL=http://open-webui:8080'
      - 'OPENSEARCH_URI=${OPENSEARCH_HOST}:${OPENSEARCH_PORT}'
      - 'OPENSEARCH_USERNAME=${DEFAULT_USERNAME}'
      - 'OPENSEARCH_PASSWORD=${DEFAULT_PASSWORD}'
      - 'DEFAULT_USERNAME=${DEFAULT_USERNAME}'
      - 'DEFAULT_PASSWORD=${DEFAULT_PASSWORD}'
      - 'SYNC_ON_STARTUP=${SYNC_ON_STARTUP}'
    depends_on:
      - open-webui
      - opensearch-node1
      - opensearch-node2
    restart: unless-stopped
    networks:
      - opensearch-net # All of the containers will join the same Docker bridge network
    depends_on:
      open-webui:
        condition: service_healthy
      opensearch-node1:
        condition: service_started
      opensearch-node2:
        condition: service_started

configs:
  tika_config_3:
    file: ./tika-config.xml

volumes:
  datahandler: {}
  ollama: {}
  open-webui: {}
  opensearch-data1: {}
  opensearch-data2: {} 


networks:
  opensearch-net:
